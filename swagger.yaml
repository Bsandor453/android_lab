swagger: "2.0"
info:
  description: "This is the API for Mobile Software Laboratory home assignment. The application tracks current and historical prices of various cryptocurrencies. Data is provided by the Coingecko API."
  version: "1.0.0"
  title: "CryptoChecker App"
  contact:
    email: "bsandor453@gmail.com"
host: "api.coingecko.com"
schemes:
- "https"
tags:
- name: "coins"
  description: "Endpoints used to get general information about crypto coins."
- name: "history"
  description: "Endpoints used to get historical price data about crypto coins."
- name: "mock"
  description: "Endpoints used only in mock calls. These are not provided by the public API."
paths:
  /api/v3/coins/markets:
    get:
      summary: "Get general information about given coins."
      operationId: "getCoins"
      tags: 
      - "coins"
      produces:
      - "application/json"
      parameters:
      - name: "vs_currency"
        in: "query"
        description: "The target currency of market data (usd, eur, jpy, etc.)."
        required: true
        type: "string"
      - name: "ids"
        in: "query"
        description: "The ids of the coin, comma separated crytocurrency symbols (base). When left empty, returns numbers the coins observing the params limit and start."
        required: false
        type: "string"
      - name: "order"
        in: "query"
        description: "Sort results by different metrics. Default value: market_cap_desc."
        required: false
        type: "string"
        enum:
        - "market_cap_desc"
        - "market_cap_asc"
        - "gecko_desc"
        - "gecko_asc"
        - "volume_asc"
        - "volume_desc"
        - "id_asc"
        - "id_desc"
      - name: "per_page"
        in: "query"
        description: "Total results per page. Valid values: [1, 2, ..., 250]. Default value : 100."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Page through results. Default value : 1."
        required: false
        type: "string"
      responses:
        "200":
          description: "Ok. Request successful."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cryptocurrency"
  /api/v3/coins/{id}:
    get:
      summary: "Get the description of a coin."
      operationId: "getCoinDescription"
      tags: 
      - "coins"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The coin id (eg. bitcoin)."
        required: true
        type: "string"
      - name: "localization"
        in: "query"
        description: "Include all localized languages in response (true/false). Default: true."
        required: false
        type: "string"
      responses:
        "200":
          description: "Ok. Request successful."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CoinDescription"
    put:
      tags:
      - "mock"
      summary: "Add a new coin."
      operationId: "updateCoin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The coin id (eg. bitcoin)."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Cryptocurrency object that you want to update the current object to."
        required: true
        schema:
          $ref: "#/definitions/Cryptocurrency"
      responses:
        "200":
          description: "Ok. Request successful."
    delete:
      tags:
      - "mock"
      summary: "Add a new coin."
      operationId: "deleteCoin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The coin id (eg. bitcoin)."
        required: true
        type: "string"
      responses:
        "200":
          description: "Ok. Request successful."
  /api/v3/coins:
    post:
      tags:
      - "mock"
      summary: "Add a new coin."
      operationId: "addCoin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Cryptocurrency object that you want to add."
        required: true
        schema:
          $ref: "#/definitions/Cryptocurrency"
      responses:
        "200":
          description: "Ok. Request successful."
  /api/v3/coins/{id}/market_chart:
    get:
      summary: "Get historical prices of a given coin."
      operationId: "getHistory"
      tags:
      - "history"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The coin id. (eg. bitcoin)."
        required: true
        type: "string"
      - name: "vs_currency"
        in: "query"
        description: "The target currency of market data (usd, eur, jpy, etc.)."
        required: true
        type: "string"
      - name: "days"
        in: "query"
        description: "Data up to number of days ago (eg. 1, 14, 30, max)."
        required: true
        type: "string"
      responses:
        "200":
          description: "Ok. Request successful. Data format: [timestamp, price]"
          schema:
            $ref: "#/definitions/HistoricalPrices"

definitions:
  Cryptocurrency:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      symbol:
        type: "string"
      price:
        type: "number"
        format: "double"
      description:
        type: "string"
      imageUrl:
        type: "string"
    xml:
      name: "Cryptocurrency"
  HistoricalPrice:
    type: "array"
    xml:
      name: "HistoricalPrice"
    items:
      type: "number"
    minItems: 2
    maxItems: 2
  HistoricalPrices:
    type: "object"
    properties:
      prices:
        type: "array"
        xml:
          name: "prices"
          wrapped: true
        items:
          $ref: "#/definitions/HistoricalPrice"
    xml:
      name: "HistoricalPrices"
  CoinDescription:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      symbol:
        type: "string"
      en:
        $ref: "#/definitions/Description"
  Description:
    type: "object"
    properties:
      en:
        type: "string"
    